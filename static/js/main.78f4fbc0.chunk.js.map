{"version":3,"sources":["components/Header.js","components/Formulario.js","components/Resumen.js","components/Resultado.js","components/App.js","helper.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cotizarSeguro","e","preventDefault","plan","planBasicoRef","current","checked","infoAuto","marca","marcaRef","value","year","yearRef","currentTarget","reset","React","createRef","planCompletoRef","onSubmit","name","ref","type","Component","Resumen","mostrarResumen","_this$props$datos","datos","Resultado","resultado","mensaje","react_transition_group","component","classNames","key","timeout","enter","exit","App","Date","getFullYear","obtenerDiferenciaAnio","modelo","incremento","calcularMarca","incrementoPlan","toLowerCase","obtenerPlan","parseFloat","toFixed","datosAuto","setState","state","components_Header","components_Formulario","components_Resumen","components_Resultado","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAYeA,EAVA,SAAAC,GACb,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OACdH,EAAAC,EAAAC,cAAA,UACKH,EAAMK,UCoEJC,cArEX,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KAOVc,cAAgB,SAAAC,GACZA,EAAEC,iBAEF,IAAMC,EAAOV,EAAKW,cAAcC,QAAQC,QAAU,SAAW,WAGvDC,EAAW,CACbC,MAAOf,EAAKgB,SAASJ,QAAQK,MAC7BC,KAAMlB,EAAKmB,QAAQP,QAAQK,MAC3BP,KAAMA,GAGVV,EAAKP,MAAMc,cAAcO,GAGzBN,EAAEY,cAAcC,SArBhBrB,EAAKgB,SAAWM,IAAMC,YACtBvB,EAAKmB,QAAUG,IAAMC,YACrBvB,EAAKW,cAAgBW,IAAMC,YAC3BvB,EAAKwB,gBAAkBF,IAAMC,YALdvB,wEA2Bf,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAe4B,SAAUtB,KAAKI,eAC1Cb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAQ8B,KAAK,QAAQC,IAAKxB,KAAKa,UAC3BtB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,aAAd,aACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,WAAd,WACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,YAAd,cAIRvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAQ8B,KAAK,OAAOC,IAAKxB,KAAKgB,SAC1BzB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,QAAd,QACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,QAAd,QACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,QAAd,QACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,QAAd,QACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,QAAd,QACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,QAAd,QACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,QAAd,QACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,QAAd,QACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,QAAd,QACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,QAAd,QACAvB,EAAAC,EAAAC,cAAA,UAAQqB,MAAM,QAAd,UAGRvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,QAAQF,KAAK,OAAOT,MAAM,SAASU,IAAKxB,KAAKQ,gBAF7D,aAGIjB,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,QAAQF,KAAK,OAAOT,MAAM,WAAWU,IAAKxB,KAAKqB,kBAH/D,aAMA9B,EAAAC,EAAAC,cAAA,UAAQgC,KAAK,SAAS/B,UAAU,SAAhC,oBAhEKgC,iBCyBVC,6MAvBXC,eAAiB,WAAM,IAAAC,EACShC,EAAKP,MAAMwC,MAAhClB,EADYiB,EACZjB,MAAOG,EADKc,EACLd,KAAMR,EADDsB,EACCtB,KACpB,OAAIK,GAAUG,GAASR,EAEnBhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,oBAAYmB,GACZrB,EAAAC,EAAAC,cAAA,mBAAWc,GACXhB,EAAAC,EAAAC,cAAA,qBAAUsB,IANkB,8EAYpC,OACIxB,EAAAC,EAAAC,cAAA,WACKO,KAAK4B,yBAlBAF,oBCuBPK,mLApBP,IAAMC,EAAYhC,KAAKV,MAAM0C,UACvBC,EAAYD,EAAkD,iBAArC,uCAC/B,OACIzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVuC,EACD1C,EAAAC,EAAAC,cAACyC,EAAA,gBAAD,CACIC,UAAU,OACVzC,UAAU,aACVH,EAAAC,EAAAC,cAACyC,EAAA,cAAD,CACIE,WAAW,YACXC,IAAKL,EACLM,QAAS,CAACC,MAAM,IAAKC,KAAK,MAC1BjD,EAAAC,EAAAC,cAAA,YAAOuC,aAdPN,aCoETe,cA7DX,SAAAA,EAAYnD,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyC,IACf5C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2C,GAAAtC,KAAAH,KAAMV,KAOVc,cAAgB,SAAA0B,GAAS,IACdlB,EAAqBkB,EAArBlB,MAAOL,EAAcuB,EAAdvB,KAAMQ,EAAQe,EAARf,KAGhBiB,EAAY,IAMhBA,GAA4B,EC5B7B,SAA+BjB,GAClC,OAAO,IAAI2B,MAAOC,cAAgB5B,EDwBX6B,CAAsB7B,GAGRiB,EAAa,IAG9CA,EC3BD,SAAwBa,GAC3B,IAAIC,EAEJ,OAAQD,GACJ,IAAK,UACDC,EAAa,IACb,MACJ,IAAK,YACDA,EAAa,KACb,MACJ,IAAK,WACDA,EAAa,KAMrB,OAAOA,EDUSC,CAAcnC,GAASoB,EAGnC,IAAIgB,ECXL,SAAsBzC,GACzB,MAA+B,WAAvBA,EAAK0C,cAA8B,IAAO,IDUzBC,CAAY3C,GAGjCyB,EAAYmB,WAAWH,EAAiBhB,GAAWoB,QAAQ,GAG3D,IAAMC,EAAY,CACdzC,MAAOA,EACPL,KAAMA,EACNQ,KAAMA,GAGVlB,EAAKyD,SAAS,CACVtB,UAAWA,EACXF,MAAOuB,KApCXxD,EAAK0D,MAAQ,CACTvB,UAAW,GACXF,MAAO,IAJIjC,wEA2Cf,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAC+D,EAAD,CACI7D,OAAO,gCACXJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAACgE,EAAD,CACIrD,cAAeJ,KAAKI,gBACxBb,EAAAC,EAAAC,cAACiE,EAAD,CACI5B,MAAO9B,KAAKuD,MAAMzB,MAClBE,UAAWhC,KAAKuD,MAAMvB,YAC1BzC,EAAAC,EAAAC,cAACkE,EAAD,CACI3B,UAAWhC,KAAKuD,MAAMvB,qBAxD5BN,aEIEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.78f4fbc0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = props =>{\r\n  return (\r\n    <header className='top'>\r\n        <h1>\r\n            {props.titulo}\r\n        </h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\n\r\nclass Formulario extends Component {\r\n\r\n    //ref son para leer los valores de los campos de un formulario\r\n    constructor(props) {\r\n        super(props);\r\n        this.marcaRef = React.createRef();\r\n        this.yearRef = React.createRef();\r\n        this.planBasicoRef = React.createRef();\r\n        this.planCompletoRef = React.createRef();\r\n    }\r\n\r\n    cotizarSeguro = e => {\r\n        e.preventDefault();\r\n        //Leer plan y designar con operador ternario\r\n        const plan = this.planBasicoRef.current.checked ? 'Basico' : 'Completo';\r\n\r\n        //crear el objeto\r\n        const infoAuto = {\r\n            marca: this.marcaRef.current.value,\r\n            year: this.yearRef.current.value,\r\n            plan: plan\r\n        };\r\n        //enviar al componente principal\r\n        this.props.cotizarSeguro(infoAuto);\r\n\r\n        //Resetear formulario\r\n        e.currentTarget.reset();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"cotizar-auto\" onSubmit={this.cotizarSeguro}>\r\n                    <div className=\"campo\">\r\n                        <label>Marca</label>\r\n                        <select name=\"marca\" ref={this.marcaRef}>\r\n                            <option value=\"americano\">Americano</option>\r\n                            <option value=\"europeo\">Europeo</option>\r\n                            <option value=\"asiatico\">Asiatico</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"campo\">\r\n                        <label>Año</label>\r\n                        <select name=\"year\" ref={this.yearRef}>\r\n                            <option value=\"2018\">2018</option>\r\n                            <option value=\"2017\">2017</option>\r\n                            <option value=\"2016\">2016</option>\r\n                            <option value=\"2015\">2015</option>\r\n                            <option value=\"2014\">2014</option>\r\n                            <option value=\"2013\">2013</option>\r\n                            <option value=\"2012\">2012</option>\r\n                            <option value=\"2011\">2011</option>\r\n                            <option value=\"2010\">2010</option>\r\n                            <option value=\"2009\">2009</option>\r\n                            <option value=\"2008\">2008</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"campo\">\r\n                        <label>Plan:</label>\r\n                        <input type=\"radio\" name=\"plan\" value=\"basico\" ref={this.planBasicoRef}/> Básico\r\n                        <input type=\"radio\" name=\"plan\" value=\"completo\" ref={this.planCompletoRef}/> Completo\r\n                    </div>\r\n\r\n                    <button type=\"submit\" className=\"boton\">Cotizar</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Formulario;","import React, {Component} from 'react';\r\n\r\nclass Resumen extends Component {\r\n\r\n    mostrarResumen = () => {\r\n        const {marca, year, plan} = this.props.datos;\r\n        if(!marca || !year || !plan) return null;\r\n        return (\r\n            <div className=\"resumen\">\r\n                <h2>Resumen de cotización</h2>\r\n                <li>Marca: {marca}</li>\r\n                <li>Plan: {plan}</li>\r\n                <li>Año: {year}</li>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.mostrarResumen()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Resumen;","import React, {Component} from 'react';\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\r\n\r\nclass Resultado extends Component {\r\n    render() {\r\n        const resultado = this.props.resultado;\r\n        const mensaje = (!resultado) ? 'Elije marca, año y tipo de seguro': 'El total es: $';\r\n        return (\r\n            <div className='gran-total'>\r\n                {mensaje}\r\n                <TransitionGroup\r\n                    component=\"span\"\r\n                    className=\"resultado\">\r\n                    <CSSTransition\r\n                        classNames=\"resultado\"\r\n                        key={resultado}\r\n                        timeout={{enter:500, exit:500}}>\r\n                        <span>{resultado}</span>\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Resultado;","import React, {Component} from 'react';\r\nimport Header from \"./Header\";\r\nimport Formulario from \"./Formulario\";\r\nimport {calcularMarca, obtenerDiferenciaAnio, obtenerPlan} from \"../helper\";\r\nimport Resumen from \"./Resumen\";\r\nimport Resultado from \"./Resultado\";\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            resultado: '',\r\n            datos: {}\r\n        };\r\n    }\r\n\r\n    cotizarSeguro = datos => {\r\n        const {marca, plan, year} = datos;\r\n\r\n        //Agregar una base de 2000 pedido por la empresa\r\n        let resultado = 2000;\r\n\r\n        //Obtener la diferencia de años\r\n        const diferencia = obtenerDiferenciaAnio(year);\r\n\r\n        //por cada año restar el 3% del seguro\r\n        resultado -= ((diferencia * 3) * resultado) / 100;\r\n\r\n        //Americano 15% asiatico 5% y europeo 30% de incremento al valor actual\r\n        resultado = calcularMarca(marca) * resultado;\r\n\r\n        //el plan del auto, el básico aumenta el valor 20% y el completo el 50%\r\n        let incrementoPlan = obtenerPlan(plan);\r\n\r\n        //Dependiendo del plan incrementa\r\n        resultado = parseFloat(incrementoPlan * resultado).toFixed(2);\r\n\r\n        //Ya tenemos el costo definimos y seteamos el state\r\n        const datosAuto = {\r\n            marca: marca,\r\n            plan: plan,\r\n            year: year\r\n        };\r\n\r\n        this.setState({\r\n            resultado: resultado,\r\n            datos: datosAuto\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"contenedor\">\r\n                <Header\r\n                    titulo='Cotizador de Seguro de Auto'/>\r\n                <div className=\"contenedor-formulario\">\r\n                    <Formulario\r\n                        cotizarSeguro={this.cotizarSeguro}/>\r\n                    <Resumen\r\n                        datos={this.state.datos}\r\n                        resultado={this.state.resultado}/>\r\n                    <Resultado\r\n                        resultado={this.state.resultado}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","export function obtenerDiferenciaAnio(year) {\r\n    return new Date().getFullYear() - year;\r\n}\r\n\r\nexport function calcularMarca( modelo ) {\r\n    let incremento;\r\n\r\n    switch (modelo) {\r\n        case 'europeo':\r\n            incremento = 1.30;\r\n            break;\r\n        case 'americano':\r\n            incremento = 1.15;\r\n            break;\r\n        case 'asiatico':\r\n            incremento = 1.05;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return incremento;\r\n}\r\nexport function obtenerPlan( plan ) {\r\n    return (plan.toLowerCase() === 'basico') ? 1.20 : 1.50;\r\n}\r\nexport function primeraMayuscula(texto) {\r\n    return texto.charAt(0).toUpperCase() + texto.slice(1);\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}